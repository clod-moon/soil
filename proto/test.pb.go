// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

package test

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SourceConfig struct {
	SourceId             int64    `protobuf:"varint,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	ModelType            int64    `protobuf:"varint,2,opt,name=model_type,json=modelType,proto3" json:"model_type,omitempty"`
	AttrsConfig          string   `protobuf:"bytes,3,opt,name=attrs_config,json=attrsConfig,proto3" json:"attrs_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SourceConfig) Reset()         { *m = SourceConfig{} }
func (m *SourceConfig) String() string { return proto.CompactTextString(m) }
func (*SourceConfig) ProtoMessage()    {}
func (*SourceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}

func (m *SourceConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SourceConfig.Unmarshal(m, b)
}
func (m *SourceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SourceConfig.Marshal(b, m, deterministic)
}
func (m *SourceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceConfig.Merge(m, src)
}
func (m *SourceConfig) XXX_Size() int {
	return xxx_messageInfo_SourceConfig.Size(m)
}
func (m *SourceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SourceConfig proto.InternalMessageInfo

func (m *SourceConfig) GetSourceId() int64 {
	if m != nil {
		return m.SourceId
	}
	return 0
}

func (m *SourceConfig) GetModelType() int64 {
	if m != nil {
		return m.ModelType
	}
	return 0
}

func (m *SourceConfig) GetAttrsConfig() string {
	if m != nil {
		return m.AttrsConfig
	}
	return ""
}

type Request struct {
	SourcesConfig        []*SourceConfig `protobuf:"bytes,4,rep,name=sources_config,json=sourcesConfig,proto3" json:"sources_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetSourcesConfig() []*SourceConfig {
	if m != nil {
		return m.SourcesConfig
	}
	return nil
}

type Response struct {
	ErrCode              int64    `protobuf:"varint,6,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
	ErrMsg               string   `protobuf:"bytes,7,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{2}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetErrCode() int64 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *Response) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*SourceConfig)(nil), "SourceConfig")
	proto.RegisterType((*Request)(nil), "Request")
	proto.RegisterType((*Response)(nil), "Response")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xcf, 0x4b, 0xf4, 0x30,
	0x10, 0x86, 0xe9, 0xd7, 0x8f, 0xfe, 0x98, 0xdd, 0x55, 0xc8, 0xc5, 0xa8, 0x88, 0x75, 0x4f, 0x3d,
	0x15, 0x4c, 0x3d, 0xeb, 0x61, 0x4f, 0x1e, 0x04, 0xc9, 0x7a, 0x0f, 0x9a, 0x8c, 0xa5, 0x60, 0x37,
	0x71, 0x92, 0x15, 0xf6, 0xbf, 0x17, 0xd3, 0x2a, 0x0b, 0x2b, 0x78, 0x4b, 0xde, 0xcc, 0xf3, 0xe6,
	0x81, 0x01, 0x08, 0xe8, 0x43, 0xe3, 0xc8, 0x06, 0xbb, 0x1c, 0x60, 0xbe, 0xb6, 0x5b, 0xd2, 0xb8,
	0xb2, 0x9b, 0xd7, 0xbe, 0x63, 0xe7, 0x50, 0xfa, 0x78, 0x57, 0xbd, 0xe1, 0x49, 0x95, 0xd4, 0xa9,
	0x2c, 0xc6, 0xe0, 0xde, 0xb0, 0x0b, 0x80, 0xc1, 0x1a, 0x7c, 0x53, 0x61, 0xe7, 0x90, 0xff, 0x8b,
	0xaf, 0x65, 0x4c, 0x9e, 0x76, 0x0e, 0xd9, 0x15, 0xcc, 0x9f, 0x43, 0x20, 0xaf, 0x74, 0xec, 0xe2,
	0x69, 0x95, 0xd4, 0xa5, 0x9c, 0xc5, 0x6c, 0xac, 0x5f, 0xde, 0x41, 0x2e, 0xf1, 0x7d, 0x8b, 0x3e,
	0xb0, 0x1b, 0x38, 0x1a, 0x8b, 0x7f, 0xe6, 0xff, 0x57, 0x69, 0x3d, 0x13, 0x8b, 0x66, 0x5f, 0x48,
	0x2e, 0xa6, 0xa1, 0xa9, 0xe0, 0x16, 0x0a, 0x89, 0xde, 0xd9, 0x8d, 0x47, 0x76, 0x0a, 0x05, 0x12,
	0x29, 0x6d, 0x0d, 0xf2, 0x2c, 0xca, 0xe4, 0x48, 0xb4, 0xb2, 0x06, 0xd9, 0x09, 0x7c, 0x1d, 0xd5,
	0xe0, 0x3b, 0x9e, 0x47, 0x8b, 0x0c, 0x89, 0x1e, 0x7c, 0x27, 0x04, 0x1c, 0x3f, 0x12, 0x9a, 0x5e,
	0x87, 0xeb, 0x35, 0xd2, 0x47, 0xaf, 0x91, 0x5d, 0x42, 0xe1, 0xa6, 0x88, 0x15, 0xcd, 0xa4, 0x77,
	0x56, 0x36, 0xdf, 0xff, 0xec, 0x31, 0xe2, 0x90, 0x11, 0x7f, 0x31, 0xed, 0x21, 0xd3, 0xfe, 0xca,
	0xbc, 0x64, 0x71, 0x25, 0xed, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x02, 0x62, 0x48, 0x78, 0xa0,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Predict1ServiceClient is the client API for Predict1Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Predict1ServiceClient interface {
	Predict1(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type predict1ServiceClient struct {
	cc *grpc.ClientConn
}

func NewPredict1ServiceClient(cc *grpc.ClientConn) Predict1ServiceClient {
	return &predict1ServiceClient{cc}
}

func (c *predict1ServiceClient) Predict1(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Predict1Service/predict1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Predict1ServiceServer is the server API for Predict1Service service.
type Predict1ServiceServer interface {
	Predict1(context.Context, *Request) (*Response, error)
}

func RegisterPredict1ServiceServer(s *grpc.Server, srv Predict1ServiceServer) {
	s.RegisterService(&_Predict1Service_serviceDesc, srv)
}

func _Predict1Service_Predict1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Predict1ServiceServer).Predict1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Predict1Service/Predict1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Predict1ServiceServer).Predict1(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Predict1Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Predict1Service",
	HandlerType: (*Predict1ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "predict1",
			Handler:    _Predict1Service_Predict1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}

// Predict2ServiceClient is the client API for Predict2Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Predict2ServiceClient interface {
	Predict2(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type predict2ServiceClient struct {
	cc *grpc.ClientConn
}

func NewPredict2ServiceClient(cc *grpc.ClientConn) Predict2ServiceClient {
	return &predict2ServiceClient{cc}
}

func (c *predict2ServiceClient) Predict2(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Predict2Service/predict2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Predict2ServiceServer is the server API for Predict2Service service.
type Predict2ServiceServer interface {
	Predict2(context.Context, *Request) (*Response, error)
}

func RegisterPredict2ServiceServer(s *grpc.Server, srv Predict2ServiceServer) {
	s.RegisterService(&_Predict2Service_serviceDesc, srv)
}

func _Predict2Service_Predict2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Predict2ServiceServer).Predict2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Predict2Service/Predict2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Predict2ServiceServer).Predict2(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Predict2Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Predict2Service",
	HandlerType: (*Predict2ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "predict2",
			Handler:    _Predict2Service_Predict2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}

// Predict3ServiceClient is the client API for Predict3Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Predict3ServiceClient interface {
	Predict3(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type predict3ServiceClient struct {
	cc *grpc.ClientConn
}

func NewPredict3ServiceClient(cc *grpc.ClientConn) Predict3ServiceClient {
	return &predict3ServiceClient{cc}
}

func (c *predict3ServiceClient) Predict3(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Predict3Service/predict3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Predict3ServiceServer is the server API for Predict3Service service.
type Predict3ServiceServer interface {
	Predict3(context.Context, *Request) (*Response, error)
}

func RegisterPredict3ServiceServer(s *grpc.Server, srv Predict3ServiceServer) {
	s.RegisterService(&_Predict3Service_serviceDesc, srv)
}

func _Predict3Service_Predict3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Predict3ServiceServer).Predict3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Predict3Service/Predict3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Predict3ServiceServer).Predict3(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Predict3Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Predict3Service",
	HandlerType: (*Predict3ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "predict3",
			Handler:    _Predict3Service_Predict3_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}
